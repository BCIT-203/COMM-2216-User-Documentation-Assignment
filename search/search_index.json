{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#welcome-to-gits-world","title":"Welcome to Git\u2019s World","text":"<p>Git is a distributed version control system (VCS) that helps track changes to your codebase, collaborate with other developers, and maintain a history of your project. Whether you\u2019re working solo or with a team, Git is an essential tool for managing your source code efficiently.</p>"},{"location":"#key-features","title":"Key Features","text":"<ol> <li>Version Control: Git tracks every change made to a project\u2019s codebase, allowing users to view a complete history of their project.</li> <li>Branching and Merging: Git allows users to create branches (independent lines of development) for different features or fixes, which can later be merged back into the main codebase.</li> <li>Distributed System: Every user has a full copy of the repository, making it possible to work offline and still have access to the entire project history.</li> <li>Collaboration: Git allows multiple developers to work on the same project concurrently, helping them merge their work and avoid conflicts.</li> <li>Code Integrity: Git ensures that code remains consistent and protected from accidental changes by creating checkpoints (commits) and using checksums to verify data integrity.</li> </ol>"},{"location":"#intended-use","title":"Intended Use","text":"<ul> <li>Software development: Managing source code, version tracking, and collaborating in coding projects.</li> <li>Team collaboration: Helping developers coordinate, merge changes, and prevent code conflicts.</li> <li>Open-source projects: Facilitating contribution and community-driven development by enabling multiple contributors to work on the same codebase.</li> <li>Backup and recovery: Storing multiple versions of code to quickly revert or recover previous code states.</li> </ul>"},{"location":"#intended-readers","title":"Intended Readers","text":"<ul> <li>Software Developers: Both novice and experienced developers who want to manage and collaborate on code projects efficiently.</li> <li>DevOps Engineers: Professionals who work on automating and managing software development pipelines.</li> <li>Project Managers: Individuals who oversee software development teams and need to understand version control and collaboration tools.</li> <li>Open-Source Contributors: Anyone looking to contribute to open-source projects, where Git is commonly used for version control.</li> </ul>"},{"location":"#common-git-commands","title":"Common Git Commands","text":"<p>Here are some essential Git commands to get started:</p> Command Description <code>git init</code> Initialize a new Git repository in a project. <code>git clone &lt;repo-url&gt;</code> Copy an existing remote repository to your local machine. <code>git status</code> Check the status of files in your working directory. <code>git add &lt;file&gt;</code> Stage changes for the next commit. <code>git commit -m \"message\"</code> Save changes with a descriptive message. <code>git push origin &lt;branch&gt;</code> Upload local commits to a remote repository. <code>git pull origin &lt;branch&gt;</code> Fetch and merge changes from a remote repository. <code>git branch</code> List all branches in the repository. <code>git checkout &lt;branch&gt;</code> Switch to a different branch. <code>git merge &lt;branch&gt;</code> Merge a branch into the current branch. <code>git log</code> View commit history. <code>git revert &lt;commit&gt;</code> Undo a specific commit by creating a new commit. <code>git reset --hard HEAD</code> Discard all uncommitted changes and reset to the last commit. <p>By using Git, you\u2019ll be able to track your progress, collaborate effectively with your team, and ensure that your project is always in a stable state. Happy coding!</p>"},{"location":"#notes-and-warning-messages","title":"Notes and Warning Messages","text":"<p>Throughout the document, you will come across two types of message blocks that provide relevant information: one for warnings and one for notes.</p> <p>Notes</p> <p>Contains relevent information that you should take note of.</p> <p>Warning</p> <p>Contains relevent warnings that should warn you.</p>"},{"location":"1-install/","title":"Installation and Configuration","text":""},{"location":"1-install/#overview","title":"Overview","text":"<p>This guide provides detailed steps for installing Git on various operating systems (Windows, macOS, Linux), configuring it for use, and resolving common setup issues.</p>"},{"location":"1-install/#installation-instructions","title":"Installation Instructions","text":""},{"location":"1-install/#1-installing-git-on-windows","title":"1. Installing Git on Windows","text":""},{"location":"1-install/#step-by-step-instructions","title":"Step-by-Step Instructions","text":"<ol> <li> <p>Download Git Installer:</p> <ol> <li>Visit the official Git website: https://git-scm.com/download/win</li> <li>The download should start automatically. If not, click on the \"Windows\" option for the download link.</li> </ol> </li> <li> <p>Run the Installer:</p> <ol> <li>Once downloaded, double-click the installer <code>.exe</code> file to start the installation process.</li> <li>Click \"Next\" to proceed through the steps. You can generally accept the default options unless you need to change settings for specific use cases.</li> </ol> </li> <li> <p>Verify Installation:</p> <ol> <li>Open a command prompt (<code>cmd</code>) or Git Bash (installed by default).</li> <li> <p>Type the following command to verify that Git is installed:</p> <pre><code>git --version\n</code></pre> </li> </ol> </li> </ol> <p>Note</p> <p>Git Bash is a command-line interface included with Git for Windows. It provides a Unix-like environment for running Git commands.</p>"},{"location":"1-install/#2-installing-git-on-macos","title":"2. Installing Git on macOS","text":""},{"location":"1-install/#step-by-step-instructions_1","title":"Step-by-Step Instructions","text":"<ol> <li> <p>Use Homebrew (Recommended):</p> <ol> <li> <p>If you have Homebrew installed, you can install Git with the following command:</p> <pre><code>brew install git\n</code></pre> </li> </ol> </li> <li> <p>Manual Installation (Without Homebrew):</p> <ol> <li>Download the Git installer from https://git-scm.com/download/mac.</li> <li>Open the <code>.dmg</code> file and follow the on-screen instructions to complete the installation.</li> </ol> </li> <li> <p>Verify Installation:</p> <ol> <li> <p>Open the Terminal and type the following command to check if Git is installed:</p> <pre><code>git --version\n</code></pre> </li> </ol> </li> </ol>"},{"location":"1-install/#3-installing-git-on-linux","title":"3. Installing Git on Linux","text":""},{"location":"1-install/#step-by-step-instructions-ubuntudebian-based","title":"Step-by-Step Instructions (Ubuntu/Debian-based)","text":"<ol> <li> <p>Install Git:</p> <ol> <li> <p>Open a terminal and use the package manager to install Git:</p> <pre><code>sudo apt update\nsudo apt install git\n</code></pre> </li> </ol> </li> <li> <p>Verify Installation:</p> <ol> <li> <p>Check the installation by running:</p> <pre><code>git --version\n</code></pre> </li> </ol> </li> </ol> <p>Note</p> <p>For other Linux distributions, use the respective package manager (<code>yum</code>, <code>dnf</code>, etc.).</p>"},{"location":"1-install/#configuration-instructions","title":"Configuration Instructions","text":""},{"location":"1-install/#1-setting-up-git-for-the-first-time","title":"1. Setting Up Git for the First Time","text":""},{"location":"1-install/#step-by-step-instructions_2","title":"Step-by-Step Instructions","text":"<ol> <li> <p>Set Your User Name and Email:     Git uses this information to label the commits you make. Run the following commands, replacing \"Your Name\" and \"your.email@example.com\" with your actual details:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre> </li> <li> <p>Verify Configuration:     To verify the configuration settings, run:</p> <pre><code>git config --list\n</code></pre> </li> </ol> <p>Note</p> <p>The <code>--global</code> flag ensures that these settings are applied to all repositories on your system. You can override these settings on a per-repository basis by omitting the <code>--global</code> flag.</p>"},{"location":"1-install/#2-configuring-default-text-editor-optional","title":"2. Configuring Default Text Editor (Optional)","text":""},{"location":"1-install/#step-by-step-instructions_3","title":"Step-by-Step Instructions","text":"<ol> <li>Set Default Editor:</li> <li> <p>If you prefer using a different text editor (like VSCode or Sublime), set it using the following command:</p> <pre><code>git config --global core.editor \"code --wait\"  # For VSCode\n</code></pre> </li> <li> <p>Check Default Editor:</p> </li> <li> <p>You can check your current default editor with:</p> <pre><code>git config --global core.editor\n</code></pre> </li> </ol>"},{"location":"1-install/#troubleshooting","title":"Troubleshooting","text":""},{"location":"1-install/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li>Git Command Not Found:</li> <li> <p>Solution: Ensure that Git was added to your system\u2019s <code>PATH</code> during installation. Re-run the installation and check the options to add Git to your system\u2019s <code>PATH</code>.</p> </li> <li> <p>Permission Denied When Pushing to Remote:</p> </li> <li>Solution: Ensure you have the correct SSH keys set up for remote repositories, or authenticate with your username/password if using HTTPS.</li> </ol> <p>Warning</p> <p>Be Careful with the <code>--global</code> Flag: If you accidentally set the wrong user information globally, you can reset it using the <code>--global</code> flag again with the correct values.</p>"},{"location":"1-install/#conclusion","title":"Conclusion","text":"<p>Git is an essential tool for version control in modern software development. By following the installation and configuration steps outlined above, you should be ready to start using Git effectively. If you run into any issues, refer to the troubleshooting section for solutions, and don\u2019t hesitate to consult Git\u2019s official documentation for more advanced use cases.</p>"},{"location":"1-install/#additional-resources","title":"Additional Resources","text":"<ul> <li>Official Git Documentation</li> <li>Git Cheat Sheet</li> </ul>"},{"location":"2-repository/","title":"How to Clone and Initialize a Repository","text":""},{"location":"2-repository/#overview","title":"Overview","text":"<p>This guide covers how to clone an existing Git repository and initialize a new Git repository. Understanding these basic operations is essential for both beginners and experienced developers working with Git.</p>"},{"location":"2-repository/#cloning-a-git-repository","title":"Cloning a Git Repository","text":"<p>Cloning a repository means creating a local copy of a remote repository. It allows you to work on the project files locally while keeping track of changes and being able to sync with the remote repository.</p>"},{"location":"2-repository/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"2-repository/#1-get-the-repository-url","title":"1. Get the Repository URL","text":"<p>Navigate to the repository you want to clone (on GitHub, GitLab, Bitbucket, etc.). Copy the repository\u2019s URL. For example, a GitHub repository URL might look like this:</p> <p><pre><code>https://github.com/username/repository-name.git\n</code></pre> Demo Repository to Try: </p> <p>Use this test repository for practice: <pre><code>https://github.com/octocat/Hello-World.git\n</code></pre></p>"},{"location":"2-repository/#2-open-terminalcommand-prompt","title":"2. Open Terminal/Command Prompt","text":"<p>Open the terminal on your operating system. On Windows, you can use Git Bash, and on macOS/Linux, you can use the regular terminal.</p>"},{"location":"2-repository/#3-run-the-clone-command","title":"3. Run the Clone Command","text":"<p>In your terminal, use the following command to clone the repository:</p> <pre><code>git clone https://github.com/username/repository-name.git\n</code></pre> <p>Replace <code>https://github.com/username/repository-name.git</code> with the actual URL of the repository you are cloning.</p>"},{"location":"2-repository/#4-navigate-to-the-repository-folder","title":"4. Navigate to the Repository Folder","text":"<p>Once cloning is complete, navigate into the cloned repository\u2019s directory:</p> <pre><code>cd repository-name\n</code></pre> <p>Note</p> <p>Cloning a repository automatically creates a local copy of the project, including all branches, commit history, and files.</p> <p>Note</p> <p>After cloning, the default branch (usually <code>main</code> or <code>master</code>) is checked out.</p> <p>Warning</p> <p>Large Repositories: Cloning large repositories may take some time, depending on your internet connection and the size of the project.</p>"},{"location":"2-repository/#initializing-a-new-git-repository","title":"Initializing a New Git Repository","text":"<p>If you want to start a new project or version control an existing project, you can initialize a new Git repository.</p>"},{"location":"2-repository/#step-by-step-instructions_1","title":"Step-by-Step Instructions","text":""},{"location":"2-repository/#1-navigate-to-the-project-folder","title":"1. Navigate to the Project Folder","text":"<p>Open your terminal or command prompt and navigate to the directory of your project:</p> <pre><code>cd /path/to/your/project\n</code></pre>"},{"location":"2-repository/#2-initialize-the-git-repository","title":"2. Initialize the Git Repository","text":"<p>Run the following command to initialize a new Git repository:</p> <pre><code>git init\n</code></pre> <p>This creates a <code>.git</code> directory in your project, which is where Git tracks changes and stores metadata for version control.</p>"},{"location":"2-repository/#3-add-files-to-the-repository","title":"3. Add Files to the Repository","text":"<p>After initializing, you\u2019ll need to add files to the repository. You can either add all files in the project folder or specify individual files:</p> <pre><code>git add .\n</code></pre> <p>This command stages all files for the next commit.</p>"},{"location":"2-repository/#4-make-your-first-commit","title":"4. Make Your First Commit","text":"<p>Commit the changes with a meaningful message:</p> <pre><code>git commit -m \"Initial commit\"\n</code></pre>"},{"location":"2-repository/#5-link-to-a-remote-repository-optional","title":"5. Link to a Remote Repository (Optional)","text":"<p>If you want to push your local repository to a remote repository (e.g., GitHub, GitLab), link the remote repository using:</p> <pre><code>git remote add origin https://github.com/username/repository-name.git\n</code></pre>"},{"location":"2-repository/#6-push-changes-to-remote-repository-optional","title":"6. Push Changes to Remote Repository (Optional)","text":"<p>Push your local changes to the remote repository:</p> <pre><code>```bash\ngit push -u origin main\n```\n</code></pre> <p>Note</p> <p>The <code>git init</code> command only initializes a repository locally. If you want to collaborate with others or store your project online, you\u2019ll need to link it to a remote repository.</p> <p>Note</p> <p>You can create a new repository on GitHub, GitLab, or other platforms to host your project.</p> <p>Warning</p> <p>Accidental Initialization: Be careful when running <code>git init</code> in an existing directory that you don\u2019t intend to track with Git, as it will create a <code>.git</code> folder and start tracking changes in that folder.</p>"},{"location":"2-repository/#conclusion","title":"Conclusion","text":"<p>In this guide, we covered the basic operations of cloning an existing repository and initializing a new Git repository. Cloning is useful for collaborating on an existing project, while initializing a repository allows you to start version-controlling your own project.</p>"},{"location":"2-repository/#additional-resources","title":"Additional Resources","text":"<ul> <li>Git Documentation</li> <li>GitHub - Cloning Repositories</li> <li>GitHub - Creating a Repository</li> </ul> <p>By following these steps, you are now equipped to start working with Git repositories and collaborate effectively with others!</p>"},{"location":"3-commit/","title":"How to Do, Undo, Revert, Redo, and Edit Previous Commits","text":""},{"location":"3-commit/#overview","title":"Overview","text":"<p>During the development process, you may need to undo, revert, redo, or even edit previous commits. Whether you need to fix a mistake in your commit history, modify a commit message, or discard unnecessary commits, Git provides several tools to help you achieve this.</p> <p>In this guide, we will explore how to do, undo, revert, redo, and edit previous commits in Git, with clear steps and explanations for each operation.</p>"},{"location":"3-commit/#how-to-do-a-commit","title":"How to Do a Commit","text":"<p>Before diving into how to undo, revert, redo, or edit a commit, let\u2019s first review how to perform a commit in Git.</p>"},{"location":"3-commit/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"3-commit/#1-stage-your-changes","title":"1. Stage Your Changes","text":"<p>Before committing, make sure you\u2019ve added the changes you want to include in the commit to the staging area.</p> <pre><code>git add .\n</code></pre> <p>This command stages all modified and new files. Alternatively, you can stage specific files using:</p> <pre><code>git add &lt;file_name&gt;\n</code></pre>"},{"location":"3-commit/#2-commit-your-changes","title":"2. Commit Your Changes","text":"<p>Once your changes are staged, you can commit them:</p> <pre><code>git commit -m \"Your commit message\"\n</code></pre> <p>This will commit the changes with a descriptive message. Make sure your commit messages are clear and concise to keep your history clean.</p>"},{"location":"3-commit/#how-to-undo-a-commit-in-git","title":"How to Undo a Commit in Git","text":"<p>Sometimes, you might commit prematurely or make a mistake. Git allows you to undo commits in several ways.</p>"},{"location":"3-commit/#step-by-step-instructions_1","title":"Step-by-Step Instructions","text":""},{"location":"3-commit/#1-undo-the-last-commit-keep-changes","title":"1. Undo the Last Commit (Keep Changes)","text":"<p>If you want to undo the last commit but keep the changes you made in your working directory, you can use:</p> <pre><code>git reset --soft HEAD~1\n</code></pre> <p>This command moves the <code>HEAD</code> back one commit but keeps the changes staged for the next commit.</p>"},{"location":"3-commit/#2-undo-the-last-commit-discard-changes","title":"2. Undo the Last Commit (Discard Changes)","text":"<p>If you want to completely discard the last commit and its changes, use:</p> <pre><code>git reset --hard HEAD~1\n</code></pre> <p>This command removes the last commit and all associated changes, including the working directory modifications.</p>"},{"location":"3-commit/#3-undo-multiple-commits-keep-changes","title":"3. Undo Multiple Commits (Keep Changes)","text":"<p>To undo multiple commits but retain your changes in the staging area, you can specify the number of commits to go back:</p> <pre><code>git reset --soft HEAD~3\n</code></pre> <p>This will undo the last three commits and leave the changes staged.</p>"},{"location":"3-commit/#4-undo-multiple-commits-discard-changes","title":"4. Undo Multiple Commits (Discard Changes)","text":"<p>To undo multiple commits and discard the changes entirely, use:</p> <pre><code>git reset --hard HEAD~3\n</code></pre> <p>This will completely remove the last three commits and their changes from both the repository and your working directory.</p>"},{"location":"3-commit/#how-to-revert-a-commit-in-git","title":"How to Revert a Commit in Git","text":"<p>Unlike <code>git reset</code>, <code>git revert</code> creates a new commit that undoes the changes from a previous commit, preserving the commit history.</p>"},{"location":"3-commit/#step-by-step-instructions_2","title":"Step-by-Step Instructions","text":""},{"location":"3-commit/#1-revert-a-single-commit","title":"1. Revert a Single Commit","text":"<p>To revert a specific commit, use its commit hash (which you can find with <code>git log</code>):</p> <pre><code>git revert &lt;commit_hash&gt;\n</code></pre> <p>This command creates a new commit that undoes the changes introduced by the specified commit.</p>"},{"location":"3-commit/#2-revert-a-range-of-commits","title":"2. Revert a Range of Commits","text":"<p>You can revert multiple commits by specifying a commit range:</p> <pre><code>git revert &lt;commit_hash_1&gt;^..&lt;commit_hash_n&gt;\n</code></pre> <p>This will revert all the commits in the range from <code>&lt;commit_hash_1&gt;</code> to <code>&lt;commit_hash_n&gt;</code>.</p>"},{"location":"3-commit/#3-revert-all-changes-made-by-a-commit","title":"3. Revert All Changes Made by a Commit","text":"<p>To revert all changes made by a commit but not affect the history of commits after it, use:</p> <pre><code>git revert --no-commit &lt;commit_hash&gt;\n</code></pre> <p>This will stage the changes to be committed later, without automatically creating a commit.</p>"},{"location":"3-commit/#how-to-redo-a-commit-in-git","title":"How to Redo a Commit in Git","text":"<p>If you\u2019ve undone a commit but want to redo it, Git offers a couple of ways to recover lost commits or redo changes.</p>"},{"location":"3-commit/#step-by-step-instructions_3","title":"Step-by-Step Instructions","text":""},{"location":"3-commit/#1-recover-lost-commits-using-git-reflog","title":"1. Recover Lost Commits Using <code>git reflog</code>","text":"<p>Git keeps a log of all the changes to <code>HEAD</code> (reference log), even if those commits were lost due to a <code>reset</code> or other operations. You can use <code>git reflog</code> to find lost commits.</p> <pre><code>git reflog\n</code></pre> <p>This will show you the history of <code>HEAD</code> movements. Find the commit you want to recover and use its reference to reset or checkout to it.</p> <pre><code>git reset --hard &lt;reflog_commit_hash&gt;\n</code></pre>"},{"location":"3-commit/#2-redo-a-commit-using-git-cherry-pick","title":"2. Redo a Commit Using <code>git cherry-pick</code>","text":"<p>If you want to reapply a commit that was removed or discarded (e.g., during a reset), use the <code>git cherry-pick</code> command:</p> <pre><code>git cherry-pick &lt;commit_hash&gt;\n</code></pre> <p>This command creates a new commit with the changes from the specified commit, applying it to the current branch.</p>"},{"location":"3-commit/#how-to-edit-previous-commits-in-git","title":"How to Edit Previous Commits in Git","text":"<p>Editing a previous commit can be useful for fixing commit messages or adding changes that were missed in an earlier commit.</p>"},{"location":"3-commit/#step-by-step-instructions_4","title":"Step-by-Step Instructions","text":""},{"location":"3-commit/#1-edit-the-last-commit","title":"1. Edit the Last Commit","text":"<p>To modify the last commit, either to change the commit message or add new changes, use:</p> <pre><code>git commit --amend\n</code></pre> <p>This opens the commit editor, allowing you to change the commit message. If you want to add changes to the last commit, stage the changes first, and then run the <code>--amend</code> command.</p>"},{"location":"3-commit/#2-edit-an-older-commit-using-interactive-rebase","title":"2. Edit an Older Commit Using Interactive Rebase","text":"<p>To edit a commit that isn\u2019t the most recent, use <code>git rebase -i</code>:</p> <pre><code>git rebase -i HEAD~3\n</code></pre> <p>This command allows you to edit commits from the last 3 commits. When the editor opens, change <code>pick</code> to <code>edit</code> next to the commit you want to modify, then save and close the editor.</p> <p>Git will pause at the commit you want to edit. You can then modify the commit message or make changes, and when you\u2019re done, you can use:</p> <pre><code>git commit --amend\ngit rebase --continue\n</code></pre> <p>This will apply the changes to the commit and continue the rebase process.</p> <p>Warning</p> <p>Avoid Rewriting History in Shared Repositories: If you\u2019ve already pushed commits to a shared repository, using <code>git reset</code> or <code>git rebase</code> can rewrite history, causing problems for your collaborators. In these cases, prefer using <code>git revert</code> instead to maintain a clean history.</p> <p>Warning</p> <p>Be Careful with <code>git reset --hard</code>: The <code>--hard</code> option removes both commits and changes in your working directory. Always double-check before using this command to avoid data loss.</p> <p>Warning</p> <p>Back Up Important Changes: Before doing operations like <code>git reset --hard</code> or rebasing, it\u2019s a good idea to create a backup branch in case you need to recover your changes later: <pre><code>git checkout -b backup-branch\n</code></pre></p>"},{"location":"3-commit/#conclusion","title":"Conclusion","text":"<p>Git provides various commands to undo, revert, redo, and edit previous commits, making it a highly flexible tool for version control. Whether you need to fix a mistake, alter commit messages, or recover lost commits, Git\u2019s powerful commands like <code>git reset</code>, <code>git revert</code>, <code>git rebase</code>, and <code>git cherry-pick</code> offer the solutions you need.</p> <p>By understanding the difference between these commands and when to use them, you can manage your repository\u2019s history effectively and avoid making irreversible mistakes. Always be mindful when altering commit history, especially in shared repositories, and ensure you have backups when performing potentially destructive actions.</p>"},{"location":"4-filter/","title":"How to  <code>git-filter-branch</code> and <code>git-filter-repo</code>","text":""},{"location":"4-filter/#overview","title":"Overview","text":"<p>When working with Git repositories, there are scenarios where you might need to rewrite history, such as removing sensitive data, editing commit messages, or cleaning up large files. Git provides two powerful tools for this task: <code>git-filter-branch</code> and <code>git-filter-repo</code>. While<code>git-filter-branch</code> is widely used, <code>git-filter-repo</code> is a more modern, faster, and more efficient alternative. Both tools allow you to rewrite commit history, but they differ in performance and flexibility.</p> <p>In this guide, we will walk through detailed examples of using both tools to filter and rewrite Git history, breaking down the steps into more than 10 specific actions.</p>"},{"location":"4-filter/#backup-repository-before-filtering","title":"Backup Repository Before Filtering","text":"<p>Before running any filtering operations, it\u2019s essential to back up your repository to prevent data loss. You can create a backup by cloning the repository:</p> <pre><code>git clone --mirror &lt;repository-url&gt; &lt;backup-directory&gt;\n</code></pre> <ol> <li>This creates a full backup of your repository in <code>&lt;backup-directory&gt;</code>.</li> <li>Ensure you test any filtering operations on the backup repository first.</li> </ol> <p>Warning</p> <p>Always back up your repository before using <code>git-filter-branch</code> or <code>git-filter-repo</code>, as these operations rewrite history and can result in permanent data loss.</p> <p>Warning</p> <p>Both <code>git-filter-branch</code> and <code>git-filter-repo</code> rewrite Git history. This means commit hashes will change, and this can cause issues if others have cloned or forked the repository. Rewriting history can disrupt collaboration, so it should only be done on private branches or with careful coordination.</p> <p>Danger</p> <p>After filtering, you will need to force push (<code>git push --force</code>) to update the remote repository. This can cause conflicts for other contributors, so it\u2019s best to communicate changes clearly.</p> <p>Warning</p> <p>Running <code>git-filter-branch</code> or <code>git-filter-repo</code> on large repositories can take time. Always run the filter on a clone of the repository to test the process before applying it to the main repository.</p>"},{"location":"4-filter/#git-filter-branch-overview","title":"<code>git-filter-branch</code> Overview","text":"<p><code>git-filter-branch</code> is an older but still commonly used tool in Git to rewrite commit history. It is particularly useful for tasks like removing sensitive files from the history or modifying commit messages. However, it can be slow on large repositories.</p>"},{"location":"4-filter/#remove-a-specific-file-from-entire-history","title":"Remove a Specific File from Entire History","text":"<p>You can use <code>git-filter-branch</code> to remove a file, such as a sensitive configuration file, from the entire history of your Git repository.</p>"},{"location":"4-filter/#instruction","title":"Instruction","text":"<p>Run the following command to remove a specific file from the history:</p> <pre><code>git filter-branch --tree-filter 'rm -f path/to/your/file' -- --all\n</code></pre> <p>Replace <code>path/to/your/file</code> with the file you want to remove. This command will rewrite all commits and remove the specified file from every commit.</p> <p>Note</p> <p>This will rewrite all branches (<code>--all</code>) and affect the entire commit history.</p> <p>Note</p> <p>Be sure to make a backup before running this command, as it will permanently remove the file from history.</p>"},{"location":"4-filter/#modify-commit-messages","title":"Modify Commit Messages","text":"<p>If you need to update the commit messages (for example, to correct typos or reword them), <code>git-filter-branch</code> can help.</p>"},{"location":"4-filter/#instruction_1","title":"Instruction","text":"<p>Run the following command to filter commit messages:</p> <pre><code>```bash\ngit filter-branch --msg-filter 'sed \"s/old-text/new-text/\"' -- --all\n```\n</code></pre> <p>Replace <code>old-text</code> and <code>new-text</code> with the text you want to change. This will replace the specified text in all commit messages across all branches.</p> <p>Warning</p> <p>Modifying commit messages will rewrite commit history and affect all branches.</p> <p>Warning</p> <p>Ensure that you do this carefully, especially if you\u2019ve shared the history with others.</p>"},{"location":"4-filter/#replace-an-author-name-and-email-across-all-commits","title":"Replace an Author Name and Email Across All Commits","text":"<p>If you need to change the author\u2019s name or email address in the commit history:</p>"},{"location":"4-filter/#instruction_2","title":"Instruction","text":"<p>Run the following command to update the author\u2019s name and email:</p> <pre><code>```bash\ngit filter-branch --env-filter '\nif [ \"$GIT_AUTHOR_NAME\" = \"Old Name\" ];\nthen\n    export GIT_AUTHOR_NAME=\"New Name\"\n    export GIT_AUTHOR_EMAIL=\"new-email@example.com\"\n    export GIT_COMMITTER_NAME=\"New Name\"\n    export GIT_COMMITTER_EMAIL=\"&lt;new-email@example.com&gt;\"\nfi' -- --all\n```\n</code></pre> <p>Replace <code>Old Name</code> with the current author name and <code>New Name</code> with the new name. This will update both the author and committer information for all commits.</p> <p>Warning</p> <p>This action rewrites history and should be done with caution, especially if the repository is shared with others.</p>"},{"location":"4-filter/#remove-large-files-from-git-history","title":"Remove Large Files from Git History","text":"<p>To remove a large file (e.g., a <code>.zip</code> file or image) that was accidentally committed, use <code>git-filter-branch</code> with the <code>--tree-filter</code> option.</p>"},{"location":"4-filter/#instruction_3","title":"Instruction","text":"<p>Run the following command to remove the file:</p> <pre><code>git filter-branch --tree-filter 'rm -f path/to/largefile' -- --all\n</code></pre> <p>Replace <code>path/to/largefile</code> with the path to the file you want to remove. This will delete the file from all commits, reducing repository size.</p> <p>Warning</p> <p>Removing large files will reduce the repository size, but it will also rewrite the history.</p>"},{"location":"4-filter/#git-filter-repo-overview","title":"<code>git-filter-repo</code> Overview","text":"<p><code>git-filter-repo</code> is a more efficient and flexible tool designed to handle large repositories and more complex filtering tasks. It is faster than <code>git-filter-branch</code> and is recommended for more advanced users. It\u2019s also easier to install and use.</p>"},{"location":"4-filter/#install-git-filter-repo","title":"Install <code>git-filter-repo</code>","text":""},{"location":"4-filter/#instruction_4","title":"Instruction","text":"<p>Before using <code>git-filter-repo</code>, you need to install it. Run the following command:</p> <pre><code>pip install git-filter-repo\n</code></pre> <p>Alternatively, you can install it directly from GitHub.</p>"},{"location":"4-filter/#remove-a-file-from-repository-history-with-git-filter-repo","title":"Remove a File from Repository History with <code>git-filter-repo</code>","text":"<p>You can remove a file from the entire history of the repository using.</p>"},{"location":"4-filter/#instruction_5","title":"Instruction","text":"<p>Run the following command:</p> <pre><code>git filter-repo --invert-paths --path secret.txt\n</code></pre> <p>This command will remove <code>secret.txt</code> from every commit. The <code>--invert-paths</code> option tells Git to exclude (filter out) the specified file.</p> <p>Note</p> <p><code>git-filter-repo</code> is faster and more efficient than <code>git-filter-branch</code>, especially on large repositories.</p>"},{"location":"4-filter/#change-the-author-of-specific-commits","title":"Change the Author of Specific Commits","text":"<p>You can modify the author\u2019s name for specific commits using <code>git-filter-repo</code>. For example, to change the author for commits by a specific person:</p>"},{"location":"4-filter/#instruction_6","title":"Instruction","text":"<p>Run the following command:</p> <pre><code>git filter-repo --commit-callback '\nif commit.author_name == \"Old Author\":\n      commit.author_name = \"New Author\"\n'\n</code></pre> <p>This will update all commits made by <code>Old Author</code> and change the name to <code>New Author.</code></p>"},{"location":"4-filter/#remove-multiple-files-from-history","title":"Remove Multiple Files from History","text":"<p>You can remove multiple files.</p>"},{"location":"4-filter/#instruction_7","title":"Instruction","text":"<p>Run the following command:</p> <pre><code>git filter-repo --invert-paths --path secret.txt --path config.json\n</code></pre> <p>This command will remove both files, <code>secret.txt</code> and <code>config.json</code>, from the entire repository history.</p>"},{"location":"4-filter/#replace-a-string-in-commit-messages","title":"Replace a String in Commit Messages","text":"<p>YOu can replace a specific string across all commit messages.</p>"},{"location":"4-filter/#instruction_8","title":"Instruction","text":"<p>Run the following command:</p> <pre><code>git filter-repo --message-callback '\nif \"old-text\" in commit.message:\n    commit.message = commit.message.replace(\"old-text\", \"new-text\")\n'\n</code></pre> <p>This command replaces <code>old-text</code> with <code>new-text</code> in all commit messages.</p>"},{"location":"4-filter/#conclusion","title":"Conclusion","text":"<p>Both <code>git-filter-branch</code> and <code>git-filter-repo</code> are powerful tools for rewriting Git history. While <code>git-filter-branch</code> is useful for simpler tasks, <code>git-filter-repo</code> is more efficient and suited for larger repositories.</p> <p>Always back up your repository before using these tools, and communicate with collaborators if you\u2019re working in a shared repository. With the right precautions, you can clean up your Git history and improve your repository management effectively.</p>"},{"location":"8-troubleshoot/","title":"Troubleshooting","text":""},{"location":"8-troubleshoot/#tldr","title":"TL;DR","text":"<ul> <li>Check Git Status: Use git status frequently to see the state of your repository and any potential issues.</li> <li>Use Git Log: If you need to investigate the history of commits, use git log to review past changes and pinpoint issues.</li> <li>Backup Your Work: If you are unsure about any operation (like a merge), create a backup branch:</li> </ul> <pre><code>git branch backup-branch\n</code></pre>"},{"location":"8-troubleshoot/#overview","title":"Overview","text":"<p>This guide helps resolve some of the common issues that developers may face when using Git, particularly for beginners and intermediate users.</p> <p>Each issue is explained in a way that allows users to identify the problem, apply the correct solution, and continue their work with minimal interruptions.</p>"},{"location":"8-troubleshoot/#1-fatal-not-a-git-repository-error","title":"1. \"fatal: not a git repository\" Error","text":""},{"location":"8-troubleshoot/#problem","title":"Problem","text":"<p>You might encounter the error message:</p> <pre><code>fatal: not a git repository (or any of the parent directories): .git\n</code></pre> <p>This occurs when you try to run a Git command (like <code>git status</code>) outside of a Git repository.</p>"},{"location":"8-troubleshoot/#solution","title":"Solution","text":"<ul> <li>Make sure you are in the correct directory. A Git repository is identified by a hidden <code>.git</code> folder. If you\u2019re not inside a repository, navigate to the correct folder where the repository is initialized or cloned.</li> <li>If you\u2019re sure you should be in a repository but <code>.git</code> is missing, you might need to reinitialize the Git repository by running:</li> </ul> <pre><code>git init\n</code></pre>"},{"location":"8-troubleshoot/#2-merge-conflicts","title":"2. Merge Conflicts","text":""},{"location":"8-troubleshoot/#problem_1","title":"Problem","text":"<p>When trying to merge branches (e.g., with git merge branch-name), you may encounter conflicts:</p> <pre><code>Auto-merging file.txt\nCONFLICT (content): Merge conflict in file.txt\n</code></pre>"},{"location":"8-troubleshoot/#solution_1","title":"Solution","text":"<ol> <li> <p>Identify and Resolve Conflicts: Git will mark the conflicting sections of the file using conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;). Open the conflicted file and manually resolve the differences.</p> </li> <li> <p>Stage the Resolved Files: Once you\u2019ve resolved the conflict, stage the changes:</p> </li> </ol> <pre><code>git add file.txt\n</code></pre> <ol> <li>Complete the Merge: After resolving all conflicts, commit the changes to complete the merge:</li> </ol> <pre><code>git commit\n</code></pre>"},{"location":"8-troubleshoot/#3-detached-head-state","title":"3. \"Detached HEAD\" State","text":""},{"location":"8-troubleshoot/#problem_2","title":"Problem","text":"<p>You might find yourself in a \"detached HEAD\" state if you check out a specific commit instead of a branch. This results in the following message:</p> <p>You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, but you are not on a branch.</p>"},{"location":"8-troubleshoot/#solution_2","title":"Solution","text":"<ul> <li>If you want to return to your branch, simply run:</li> </ul> <pre><code>git checkout main   # or the name of your branch\n</code></pre> <ul> <li>If you want to create a new branch from your current commit:</li> </ul> <pre><code>git checkout -b new-branch-name\n</code></pre>"},{"location":"8-troubleshoot/#4-untracked-files-files-not-being-tracked-by-git","title":"4. Untracked Files (Files Not Being Tracked by Git)","text":""},{"location":"8-troubleshoot/#problem_3","title":"Problem","text":"<p>You see untracked files when you run git status, and you don\u2019t want to commit them yet:</p> <pre><code>Untracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file1.txt\n</code></pre>"},{"location":"8-troubleshoot/#solution_3","title":"Solution","text":"<ul> <li>To Ignore Specific Files: If you don\u2019t want to track certain files, you can add them to a .gitignore file. For example, add file1.txt to .gitignore:</li> </ul> <pre><code>file1.txt\n</code></pre> <p>After adding files to .gitignore, run:</p> <pre><code>git rm --cached file1.txt\n</code></pre> <ul> <li>To Track Files: If you want to track the untracked files, simply add them to the staging area:</li> </ul> <pre><code>git add file1.txt\n</code></pre>"},{"location":"8-troubleshoot/#5-push-rejected-due-to-non-fast-forward-updates","title":"5. Push Rejected Due to Non-Fast-Forward Updates","text":""},{"location":"8-troubleshoot/#problem_4","title":"Problem","text":"<p>When trying to push your changes, you might encounter an error like:</p> <pre><code>! [rejected]        main -&gt; main (non-fast-forward)\nerror: failed to push some refs to '&lt;https://github.com/username/repo.git&gt;'\n</code></pre> <p>This happens when your local branch is behind the remote branch and doesn\u2019t include changes that have been pushed by others.</p>"},{"location":"8-troubleshoot/#solution_4","title":"Solution","text":"<ol> <li>Pull the Latest Changes: Before pushing, you need to pull the latest changes from the remote repository:</li> </ol> <pre><code>git pull origin main   # or the relevant branch\n</code></pre> <ol> <li> <p>Resolve Any Merge Conflicts: If there are conflicts, resolve them as described in the \"Merge Conflicts\" section above.</p> </li> <li> <p>Push Again: After resolving the conflicts and committing the changes, push your changes again:</p> </li> </ol> <pre><code>git push origin main\n</code></pre>"},{"location":"9-glossary/","title":"Glossary","text":""},{"location":"9-glossary/#version-control-system-vcs","title":"Version Control System (VCS)","text":"<pre><code>A **Version Control System** is a tool used to track changes in files over time, especially in software development. It makes it easier for developers to collaborate and revert the source code.\n</code></pre>"},{"location":"9-glossary/#distributed-system","title":"Distributed System","text":"<pre><code>A **Distributed System** refers to a system that has multiple copies available on different machines.\n</code></pre>"},{"location":"9-glossary/#branching","title":"Branching","text":"<pre><code>**Branching** allows developers to create separate lines of development within the same project. Branches are independent of each other, and changes can be merged into each other. Branching helps organize features, bug fixes, and experiments without affecting others.\n</code></pre>"},{"location":"9-glossary/#merging","title":"Merging","text":"<pre><code>**Merging** integrates changes from one branch into another, so that the entire team benefits from the updates.\n</code></pre>"},{"location":"9-glossary/#commit","title":"Commit","text":"<pre><code>A **Commit** is a set of changes made to the codebase. When a developer makes changes to files and saves them in Git, they can commit those changes with a message describing what was done. Each commit is uniquely identified by a hash and represents a point in the project\u2019s history.\n</code></pre>"},{"location":"9-glossary/#repository-repo","title":"Repository (Repo)","text":"<pre><code>A **Repository** contains all the files and the metadata (commit history, branches, etc.) that Git tracks. A repository can be local (on your machine) or remote (hosted on a server like GitHub or GitLab).\n</code></pre>"},{"location":"9-glossary/#clone","title":"Clone","text":"<pre><code>**Cloning** is the process of creating a copy of a remote repository on your local machine. When you clone a repository, you get the entire project history, including all branches and commits, allowing you to work on the project locally.\n</code></pre>"},{"location":"9-glossary/#push","title":"Push","text":"<pre><code>A **Push** is the action of sending your local commits to a remote repository, making your changes available to other team members. Pushing is essential for collaboration as it shares your progress with others and syncs your local changes with the remote version of the repository.\n</code></pre>"},{"location":"9-glossary/#pull","title":"Pull","text":"<pre><code>A **Pull** is a set of actions that fetches changes from a remote repository and merges them into your local copy of the repository. It ensures that your local repository is up to date with the latest changes made by other contributors.\n</code></pre>"},{"location":"9-glossary/#forking","title":"Forking","text":"<pre><code>**Forking** allows you to make changes to the codebase of open-source projects independently, and later propose the changes (via a pull request) to be merged into the original project.\n</code></pre>"},{"location":"9-glossary/#conflict","title":"Conflict","text":"<pre><code>A **Conflict** occurs when two developers make changes to the same file in the same branches and Git cannot automatically merge these changes. Therefore, the developer must manually resolve the conflict before proceeding.\n</code></pre>"},{"location":"9-glossary/#checkout","title":"Checkout","text":"<pre><code>**Checkout** is a command used in Git to switch between different branches or commits.\n</code></pre>"}]}